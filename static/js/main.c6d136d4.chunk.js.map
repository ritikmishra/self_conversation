{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["MessageComponent","props","message","text","timestamp","left","useState","formatDistanceToNow","timestampText","setTimestampText","useEffect","setInterval","className","App","zango","Db","messages","collection","messagesCollection","setMessages","textBoxMessage","setTextBoxMessage","bottomRef","useRef","textareaRef","find","toArray","then","msgs","sort","a","b","compareAsc","current","focus","scrollIntoView","addNewMessageToCollection","messageText","trim","newMessage","_id","replace","Math","floor","random","toString","Date","now","length","insert","addMessageEventHandler","setTimeout","map","ref","value","placeholder","onChange","event","target","onKeyPress","e","key","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQA4BMA,EAAmD,SAACC,GAAiC,IAAD,EACpDA,EAAMC,QAAhCC,EAD8E,EAC9EA,KAAMC,EADwE,EACxEA,UAAWC,EAD6D,EAC7DA,KAD6D,EAE5CC,mBAAiBC,YAAoBH,IAFO,mBAE/EI,EAF+E,KAEhEC,EAFgE,KAUtF,OANAC,qBAAU,WACNC,aACI,kBAAMF,EAAiBF,YAAoBH,MAC3C,OAEL,IAEC,qCACI,mBAAGQ,UAAW,YAAcP,EAAO,mBAAqB,sBAAxD,SAAgFF,IAChF,uBAAMS,UAAW,cAAgBP,EAAO,OAAS,SAAjD,UAA4DG,EAA5D,cAoEGK,EA/DO,WAAO,IAAD,EACKP,mBA5BlB,IAAIQ,IAAMC,GAAG,SAAU,EAAG,CAAEC,SAAU,CAAC,UACpBC,WAAW,aA2BlCC,EADiB,sBAEQZ,mBAA8B,IAFtC,mBAEjBU,EAFiB,KAEPG,EAFO,OAGoBb,mBAAiB,IAHrC,mBAGjBc,EAHiB,KAGDC,EAHC,KAMlBC,EAAYC,iBAA8B,MAC1CC,EAAcD,iBAAmC,MAIvDb,qBAAU,WACNQ,EAAmBO,KAAK,IAAIC,UAAUC,MAAK,SAAAC,GACnBA,EACTC,MAAK,kBAAaC,EAAb,EAAE1B,UAA2B2B,EAA7B,EAAkB3B,UAAlB,OAAoC4B,YAAWF,EAAGC,MAClEZ,EAAaS,QAElB,IAGHlB,qBAAU,kCAAMc,EAAYS,eAAlB,aAAM,EAAqBC,UAAS,IAG9CxB,qBAAU,kCAAMY,EAAUW,eAAhB,aAAM,EAAmBE,mBAAkB,CAACnB,IAEtD,IAAMoB,EAAyB,uCAAG,WAAOC,GAAP,eAAAP,EAAA,yDAC9BO,EAAcA,EAAYC,OADI,wDAKxBC,EAAsB,CACxBC,IApDD,iBAAiBC,QAAQ,OAAO,kBAAMC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAeC,SAAS,OAqD7EzC,UAAW0C,KAAKC,MAChB1C,KAAMW,EAASgC,OAAS,IAAM,EAC9B7C,KAAMkC,GAToB,SAWxBnB,EAAmB+B,OAAOV,GAXF,OAY9BpB,EAAY,GAAD,mBAAKH,GAAL,CAAeuB,KAZI,2CAAH,sDAezBW,EAAyB,WAC3Bd,EAA0BhB,GAC1B+B,YAAW,kBAAM9B,EAAkB,QAGvC,OACI,sBAAKT,UAAU,MAAf,UACI,sBAAKA,UAAU,WAAf,UACKI,EAASoC,KAAI,SAAAlD,GAAO,OAAI,cAAC,EAAD,CAAoCA,QAASA,GAAtBA,EAAQsC,QACxD,qBAAKa,IAAK/B,IAFd,OAIA,qBAAKV,UAAU,SAAf,SACI,sBAAKA,UAAU,aAAf,UACI,0BAAUA,UAAU,iBAAiByC,IAAK7B,EAAa8B,MAAOlC,EAAgBmC,YAAY,yCAAyCC,SAAU,SAAAC,GAAK,OAAIpC,EAAkBoC,EAAMC,OAAOJ,QAAQK,WAAY,SAACC,GAAD,MAAiB,UAAVA,EAAEC,KAAmBX,OAGrO,wBAAQtC,UAAU,eAAekD,QAASZ,EAA1C,kCCxFLa,EAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,8BAAqBtC,MAAK,YAAkD,IAA/CuC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHpBO,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5BZ,K","file":"static/js/main.c6d136d4.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport zango from \"zangodb\";\nimport { compareAsc, formatDistanceToNow } from \"date-fns\";\n\ninterface Message {\n    _id: string;\n\n    /** Unix epoch timestamp, milliseconds */\n    timestamp: number;\n\n    /** If this is the user on the left side of the screen */\n    left: boolean;\n\n    /** The content of this message */\n    text: string;\n}\n\nconst getCollection = () => {\n    const db = new zango.Db(\"textdb\", 0, { messages: [\"left\"] });\n    const messagesCollection = db.collection(\"messages\");\n    return messagesCollection;\n};\n\nconst createId = (): string => {\n    return \"xxxxxxxxxxxxxx\".replace(/x/ig, () => Math.floor(Math.random() * 36).toString(36));\n};\n\nconst MessageComponent: React.FC<{ message: Message }> = (props: { message: Message }) => {\n    const { text, timestamp, left } = props.message;\n    const [timestampText, setTimestampText] = useState<string>(formatDistanceToNow(timestamp));\n\n    useEffect(() => {\n        setInterval(\n            () => setTimestampText(formatDistanceToNow(timestamp)),\n            1000\n        );\n    }, []);\n    return (\n        <>\n            <p className={\"message \" + (left ? \"left leftMessage\" : \"right rightMessage\")}>{text}</p>\n            <span className={\"timestamp \" + (left ? \"left\" : \"right\")}>{timestampText} ago</span>\n        </>\n    );\n};\n\nconst App: React.FC = () => {\n    const [messagesCollection] = useState(getCollection());\n    const [messages, setMessages] = useState<Required<Message[]>>([]);\n    const [textBoxMessage, setTextBoxMessage] = useState<string>(\"\");\n\n    /** Reference to a div that is below all of the messages */\n    const bottomRef = useRef<null | HTMLDivElement>(null);\n    const textareaRef = useRef<null | HTMLTextAreaElement>(null);\n\n\n    // On page load: load in all the messages from the database initially\n    useEffect(() => {\n        messagesCollection.find({}).toArray().then(msgs => {\n            const sortedMsgs = (msgs as unknown) as Message[];\n            sortedMsgs.sort(({timestamp: a}, {timestamp: b}) => compareAsc(a, b));\n            setMessages((msgs as unknown) as Message[]);\n        });\n    }, []);\n    \n    // On page load: click the messages button\n    useEffect(() => textareaRef.current?.focus(), []);\n\n    // Every time the messages change, scroll to the bottom of the page\n    useEffect(() => bottomRef.current?.scrollIntoView(), [messages]);\n\n    const addNewMessageToCollection = async (messageText: string): Promise<void> => {\n        messageText = messageText.trim();\n        if (!messageText) {\n            return;\n        }\n        const newMessage: Message = {\n            _id: createId(),\n            timestamp: Date.now(),\n            left: messages.length % 2 === 0,\n            text: messageText\n        };\n        await messagesCollection.insert(newMessage);\n        setMessages([...messages, newMessage]);\n    };\n\n    const addMessageEventHandler = () => {\n        addNewMessageToCollection(textBoxMessage);\n        setTimeout(() => setTextBoxMessage(\"\"));\n    };\n\n    return (\n        <div className=\"App\">\n            <div className=\"messages\">\n                {messages.map(message => <MessageComponent key={message._id} message={message} />)}\n                <div ref={bottomRef}></div> {/* dummy div used to scroll to the bottom */}\n            </div>\n            <div className=\"footer\">\n                <div className=\"submitArea\">\n                    <textarea className=\"submitTextArea\" ref={textareaRef} value={textBoxMessage} placeholder=\"What are you going to say to yourself?\" onChange={event => setTextBoxMessage(event.target.value)} onKeyPress={(e) => e.key === \"Enter\" && addMessageEventHandler()}>\n\n                    </textarea>\n                    <button className=\"submitButton\" onClick={addMessageEventHandler}>Add Message</button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}